Weimin Gao
CSc332 OS Lab
task 6: Cigarette Smokers Problem
4/27/2018

In this task, we consider a system with 3 smoker processes and 1 agent process. Each smoker continuously rolls a cigarette and then smokes it. The smoker needs three ingredients: tobacco, paper, and matches. One of the smokers has paper, another has tobacco, and the third has matches. The smoker who has the remaining ingredient then makes and smokes a cigarette, signaling the agent on completion. The agent then puts out another two of the three ingredients, and the cycle repeats.

In my semaphore-based solution (CigaretteAndSmokers.c), I use the sem.h header file. Based on he semaphore code in ProducerConsumer.c. I modified the Producer() and Consumer(), and these two functions become Agent() and Smokers(int). Also, I created semaphores, such as lock, agent, smoker_paper, smoker_tobacco, and smoker_match.Therefore agent and each smoker can do processes as follow: if they can't make a cigarette, then they will go to sleep. The agent process will place two items on the table, and wake up the appropriate smoker, and then go to sleep. All semaphores except lock are initialized to 0. lock is initialized to 1, and is a mutex variable.

To run the code you should: Open the terminal
			    Go to the path of the CigaretteAndSmokers.c. 
			    Enter cd gcc -o CigaretteAndSmokers CigaretteAndSmokers.c
			    ./CigaretteAndSmokers
(In my code N = 20 (Number of times the agent will put supply of ingredients), and we can change the number if we want to see the more output, the sequence of events for several iterations)
